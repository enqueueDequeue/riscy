package io.riscy.stages

import chisel3.util.BitPat

object OpCode {
  // signals generated from:
  // https://riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf
  // https://five-embeddev.com/riscv-user-isa-manual/Priv-v1.12/instr-table.html
  // https://github.com/riscv/riscv-opcodes

  // NOTE: When updating the architecture
  // Also update the branch predictor in case of op code collisions

  // RV32
  val ADD =       BitPat("b0000000??????????000?????0110011")
  val ADDI =      BitPat("b?????????????????000?????0010011")
  val AND =       BitPat("b0000000??????????111?????0110011")
  val ANDI =      BitPat("b?????????????????111?????0010011")
  val AUIPC =     BitPat("b?????????????????????????0010111")
  val BEQ =       BitPat("b?????????????????000?????1100011")
  val BGE =       BitPat("b?????????????????101?????1100011")
  val BGEU =      BitPat("b?????????????????111?????1100011")
  val BLT =       BitPat("b?????????????????100?????1100011")
  val BLTU =      BitPat("b?????????????????110?????1100011")
  val BNE =       BitPat("b?????????????????001?????1100011")
  val EBREAK =    BitPat("b00000000000100000000000001110011")
  val ECALL =     BitPat("b00000000000000000000000001110011")
  val FENCE =     BitPat("b?????????????????000?????0001111")
  val FENCE_TSO = BitPat("b100000110011?????000?????0001111")
  val JAL =       BitPat("b?????????????????????????1101111")
  val JALR =      BitPat("b?????????????????000?????1100111")
  val LB =        BitPat("b?????????????????000?????0000011")
  val LBU =       BitPat("b?????????????????100?????0000011")
  val LH =        BitPat("b?????????????????001?????0000011")
  val LHU =       BitPat("b?????????????????101?????0000011")
  val LUI =       BitPat("b?????????????????????????0110111")
  val LW =        BitPat("b?????????????????010?????0000011")
  val OR =        BitPat("b0000000??????????110?????0110011")
  val ORI =       BitPat("b?????????????????110?????0010011")
  val PAUSE =     BitPat("b00000001000000000000000000001111")
  val SB =        BitPat("b?????????????????000?????0100011")
  val SH =        BitPat("b?????????????????001?????0100011")
  val SLL =       BitPat("b0000000??????????001?????0110011")
  val SLT =       BitPat("b0000000??????????010?????0110011")
  val SLTI =      BitPat("b?????????????????010?????0010011")
  val SLTIU =     BitPat("b?????????????????011?????0010011")
  val SLTU =      BitPat("b0000000??????????011?????0110011")
  val SRA =       BitPat("b0100000??????????101?????0110011")
  val SRL =       BitPat("b0000000??????????101?????0110011")
  val SUB =       BitPat("b0100000??????????000?????0110011")
  val SW =        BitPat("b?????????????????010?????0100011")
  val XOR =       BitPat("b0000000??????????100?????0110011")
  val XORI =      BitPat("b?????????????????100?????0010011")

  // RV 64
  val ADDIW =     BitPat("b?????????????????000?????0011011")
  val ADDW =      BitPat("b0000000??????????000?????0111011")
  val LWU =       BitPat("b?????????????????110?????0000011")
  val SLLIW =     BitPat("b0000000??????????001?????0011011")
  val SLLW =      BitPat("b0000000??????????001?????0111011")
  val SRAIW =     BitPat("b0100000??????????101?????0011011")
  val SRAW =      BitPat("b0100000??????????101?????0111011")
  val SRLIW =     BitPat("b0000000??????????101?????0011011")
  val SRLW =      BitPat("b0000000??????????101?????0111011")
  val SUBW =      BitPat("b0100000??????????000?????0111011")

  val SLLI =      BitPat("b000000???????????001?????0010011")
  val SRLI =      BitPat("b000000???????????101?????0010011")
  val SRAI =      BitPat("b010000???????????101?????0010011")
  val LD =        BitPat("b?????????????????011?????0000011")
  val SD =        BitPat("b?????????????????011?????0100011")

  /*
  // todo: implement these as well
  val MType = Map(
    "DIV"              -> BitPat("b0000001??????????100?????0110011"),
    "DIVU"             -> BitPat("b0000001??????????101?????0110011"),
    "MUL"              -> BitPat("b0000001??????????000?????0110011"),
    "MULH"             -> BitPat("b0000001??????????001?????0110011"),
    "MULHSU"           -> BitPat("b0000001??????????010?????0110011"),
    "MULHU"            -> BitPat("b0000001??????????011?????0110011"),
    "REM"              -> BitPat("b0000001??????????110?????0110011"),
    "REMU"             -> BitPat("b0000001??????????111?????0110011"),
  )
  val M64Type = Map(
    "DIVUW"            -> BitPat("b0000001??????????101?????0111011"),
    "DIVW"             -> BitPat("b0000001??????????100?????0111011"),
    "MULW"             -> BitPat("b0000001??????????000?????0111011"),
    "REMUW"            -> BitPat("b0000001??????????111?????0111011"),
    "REMW"             -> BitPat("b0000001??????????110?????0111011"),
  )
  */
}
